// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "user-service-golang/internal/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryActions is a mock of UserRepositoryActions interface.
type MockUserRepositoryActions struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryActionsMockRecorder
}

// MockUserRepositoryActionsMockRecorder is the mock recorder for MockUserRepositoryActions.
type MockUserRepositoryActionsMockRecorder struct {
	mock *MockUserRepositoryActions
}

// NewMockUserRepositoryActions creates a new mock instance.
func NewMockUserRepositoryActions(ctrl *gomock.Controller) *MockUserRepositoryActions {
	mock := &MockUserRepositoryActions{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryActions) EXPECT() *MockUserRepositoryActionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryActions) Create(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryActionsMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryActions)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockUserRepositoryActions) Delete(userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryActionsMockRecorder) Delete(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepositoryActions)(nil).Delete), userId)
}

// FindByEmail mocks base method.
func (m *MockUserRepositoryActions) FindByEmail(email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryActionsMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepositoryActions)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockUserRepositoryActions) FindById(userId uint) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", userId)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryActionsMockRecorder) FindById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepositoryActions)(nil).FindById), userId)
}

// FindByNickname mocks base method.
func (m *MockUserRepositoryActions) FindByNickname(email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNickname", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNickname indicates an expected call of FindByNickname.
func (mr *MockUserRepositoryActionsMockRecorder) FindByNickname(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNickname", reflect.TypeOf((*MockUserRepositoryActions)(nil).FindByNickname), email)
}

// IsEmailExist mocks base method.
func (m *MockUserRepositoryActions) IsEmailExist(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailExist", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmailExist indicates an expected call of IsEmailExist.
func (mr *MockUserRepositoryActionsMockRecorder) IsEmailExist(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExist", reflect.TypeOf((*MockUserRepositoryActions)(nil).IsEmailExist), email)
}

// IsNicknameExist mocks base method.
func (m *MockUserRepositoryActions) IsNicknameExist(nickname string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNicknameExist", nickname)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNicknameExist indicates an expected call of IsNicknameExist.
func (mr *MockUserRepositoryActionsMockRecorder) IsNicknameExist(nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNicknameExist", reflect.TypeOf((*MockUserRepositoryActions)(nil).IsNicknameExist), nickname)
}

// Update mocks base method.
func (m *MockUserRepositoryActions) Update(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryActionsMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryActions)(nil).Update), user)
}
